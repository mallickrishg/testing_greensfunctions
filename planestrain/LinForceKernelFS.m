function [Disp,Stress,Strain] = LinForceKernelFS(x,y,xf,yf,w,nu,mu)
% compute displacement and stress kernels for a linearly varying force on a
% horizontal source element (-w <= x <= w, y = 0)
% INPUTS
% x,y - observation locations provided as individual vectors [Nobs x 1]
% xf,yf - source element center location (scalars)
% w - source element half-length
% nu,mu - Elastic parameters
% OUTPUTS
% Disp - 4-d displacement kernels [Nobs x (ux or uy) x (fx or fy) x 2 basis functions]
% Stress,Strain - 4-d stress_kernels     [Nobs x (sxx,sxy,syy) x (fx or fy) x 2 basis functions]
% 
% AUTHORS
% Rishav Mallick, JPL, 2024

Nobs = length(x);

xo = x - xf;
yo = y - yf;

% force components
fx = 1;
fy = 1;

%% Displacement kernels
% ux kernels (is non-zero at yo = 0 only for fx)
ux_1 = @(fx,fy,w) ((1/8).*fx.*w.^(-1).*(w+(-1).*xo).*(3.*w+xo).*mu.^(-1).*nu.*(pi+(-1) ...
  .*pi.*nu).^(-1).*log((w+(-1).*xo).^2+yo.^2)+(1/32).*fx.*pi.^(-1).* ...
  w.^(-1).*mu.^(-1).*((-1)+nu).^(-1).*(4.*w.*(8.*w.*((-1)+nu)+xo.*((-3) ...
  +4.*nu))+(-16).*(w+xo).*yo.*((-1)+nu).*atan((w-xo)./yo)+ ...
  (-16).*(w+xo).*yo.*((-1)+nu).*atan((w+xo)./yo)+(3.*(w+(-1).* ...
  xo).*(3.*w+xo)+yo.^2.*(5+(-4).*nu)).*log((w+(-1).*xo).^2+yo.^2)+( ...
  3.*(w+xo).^2+(-5).*yo.^2+(-4).*(w+xo+(-1).*yo).*(w+xo+yo).*nu).* ...
  log((w+xo).^2+yo.^2)) + ...
  (1/16).*fy.*pi.^(-1).*w.^(-1).*yo.*mu.^(-1).*((-1)+nu).^(-1).*(4.*w+ ...
  (-2).*yo.*(atan((w-xo)./yo)+atan((w+xo)./yo))+( ...
  w+xo).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2))))./2;

ux_2 = @(fx,fy,w) (1/64).*fx.*pi.^(-1).*w.^(-1).*(w+(-1).*xo).^2.*mu.^(-1).*(3+(-4).* ...
  nu).*((-1)+nu).^(-1).*log((w+(-1).*xo).^2+yo.^2)+(1/32).*pi.^(-1).* ...
  w.^(-1).*(w+(-1).*xo).*mu.^(-1).*((-1)+nu).^(-1).*((-8).*fx.*yo.*(( ...
  -1)+nu).*(atan((w-xo)./yo)+atan((w+xo)./yo))+fy.* ...
  yo.*log((w+(-1).*xo).^2+yo.^2))+(1/64).*pi.^(-1).*w.^(-1).*mu.^(-1) ...
  .*((-1)+nu).^(-1).*(4.*w.*((-2).*fy.*yo+fx.*xo.*(3+(-4).*nu)+8.*fx.* ...
  w.*((-1)+nu))+yo.^2.*(4.*fy.*(atan((w-xo)./yo)+atan((w+xo)./yo))+...
  fx.*((-5)+4.*nu).*log((w+(-1).*xo).^2+yo.^2))+(2.* ...
  fy.*((-1).*w+xo).*yo+fx.*(3.*(3.*w+(-1).*xo).*(w+xo)+5.*yo.^2+(-4) ...
  .*((3.*w+(-1).*xo).*(w+xo)+yo.^2).*nu)).*log((w+xo).^2+yo.^2));

% uy kernels (is non-zero at yo = 0 only for fy)
uy_1 = @(fx,fy,w) (1/32).*fx.*pi.^(-1).*w.^(-1).*yo.*mu.^(-1).*((-1)+nu).^(-1).*(4.*w+ ...
  (-2).*yo.*(atan((w-xo)./yo)+atan((w+xo)./yo))+( ...
  w+xo).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)))+( ...
  1/64).*fy.*pi.^(-1).*w.^(-1).*mu.^(-1).*((-1)+nu).^(-1).*(4.*w.*(2.* ...
  w+xo).*((-3)+4.*nu)+8.*(w+xo).*yo.*((-1)+2.*nu).*atan((-w+xo)./yo)+...
  (-8).*(w+xo).*yo.*((-1)+2.*nu).*atan((w+xo)./yo)+( ...
  w.^2.*(9+(-12).*nu)+yo.^2.*(1+(-4).*nu)+2.*w.*xo.*((-3)+4.*nu)+ ...
  xo.^2.*((-3)+4.*nu)).*log((w+(-1).*xo).^2+yo.^2)+(-1).*((-3).*(w+ ...
  xo).^2+yo.^2+4.*(w+xo+(-1).*yo).*(w+xo+yo).*nu).*log((w+xo).^2+ ...
  yo.^2));

uy_2 = @(fx,fy,w) fx.*((-1/32).*pi.^(-1).*w.^(-1).*yo.*mu.^(-1).*((-1)+nu).^(-1).*(4.* ...
  w+(-2).*yo.*(atan((w-xo)./yo)+atan((w+xo)./yo))+ ...
  ((-1).*w+xo).*log((w+(-1).*xo).^2+yo.^2))+(w+(-1).*xo).*yo.*(32.* ...
  pi.*w.*mu+(-32).*pi.*w.*mu.*nu).^(-1).*log(w.^2+2.*w.*xo+xo.^2+yo.^2) ...
  )+fy.*((-1/8).*pi.^(-1).*w.^(-1).*(w+(-1).*xo).*yo.*mu.^(-1).*((-1) ...
  +nu).^(-1).*((-1)+2.*nu).*(atan((w-xo)./yo)+atan((w+xo)./yo))+...
  (1/64).*pi.^(-1).*w.^(-1).*(w+(-1).*xo).^2.*mu.^(-1).* ...
  (3+(-4).*nu).*((-1)+nu).^(-1).*log((w+(-1).*xo).^2+yo.^2)+(1/64).* ...
  pi.^(-1).*w.^(-1).*mu.^(-1).*((-1)+nu).^(-1).*(4.*w.*(2.*w+(-1).*xo) ...
  .*((-3)+4.*nu)+yo.^2.*((-1)+4.*nu).*log((w+(-1).*xo).^2+yo.^2)+(3.*( ...
  3.*w+(-1).*xo).*(w+xo)+yo.^2+(-4).*((3.*w+(-1).*xo).*(w+xo)+yo.^2) ...
  .*nu).*log((w+xo).^2+yo.^2)));

% Store displacement kernels (4-d matrix)
% Disp_kernels - [Nobs x (ux or uy) x (fx or fy) x 2 basis functions]
Disp = zeros(Nobs,2,2,2);

% fx kernels
Disp(:,1,1,:) = [ux_1(fx,0,w),ux_2(fx,0,w)];
Disp(:,2,1,:) = [uy_1(fx,0,w),uy_2(fx,0,w)];
% fy kernels
Disp(:,1,2,:) = [ux_1(0,fy,w),ux_2(0,fy,w)];
Disp(:,2,2,:) = [uy_1(0,fy,w),uy_2(0,fy,w)];

%% Stress kernels
% sxy kernels
sxy_1 = @(fx,fy,w) (-1/8).*fx.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(2.*w.*(w+(-1).*xo) ...
  .*yo.*((w+(-1).*xo).^2+yo.^2).^(-1)+2.*(w+xo).*((-1)+nu).*atan((w-xo)./yo)+...
  2.*(w+xo).*((-1)+nu).*atan((w+xo)./yo)+( ...
  1/2).*yo.*((-3)+2.*nu).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+ ...
  xo).^2+yo.^2)))+(1/8).*fy.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(( ...
  -2).*w.*(w+(-1).*xo).^2.*((w+(-1).*xo).^2+yo.^2).^(-1)+4.*w.*nu+2.* ...
  yo.*nu.*atan((-w+xo)./yo)+(-2).*yo.*nu.*atan((w+xo)./yo)+...
  (1/2).*(w+xo).*((-1)+2.*nu).*(log((w+(-1).*xo).^2+yo.^2)+ ...
  (-1).*log((w+xo).^2+yo.^2)));

sxy_2 = @(fx,fy,w) (-1/16).*fx.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(4.*w.*(w+xo).* ...
  yo.*((w+xo).^2+yo.^2).^(-1)+4.*(w+(-1).*xo).*((-1)+nu).*atan((w-xo)./yo)+4.*(w+(-1).*xo).*((-1)+nu).*atan((w+xo)./yo)+...
  (-1).*yo.*((-3)+2.*nu).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log( ...
  (w+xo).^2+yo.^2)))+(-1/16).*fy.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1) ...
  .*((-4).*w.*(w+xo).^2.*((w+xo).^2+yo.^2).^(-1)+8.*w.*nu+(-4).*yo.* ...
  nu.*atan((w-xo)./yo)+(-4).*yo.*nu.*atan((w+xo)./yo)+...
  ((-1).*w+xo).*((-1)+2.*nu).*(log((w+(-1).*xo).^2+yo.^2)+(-1).* ...
  log((w+xo).^2+yo.^2)));

% sxx kernels
sxx_1 = @(fx,fy,w) (1/8).*fx.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(((w+(-1).*xo).^2+ ...
  yo.^2).^(-1).*((-6).*w.*(w+(-1).*xo).^2+(-8).*w.*yo.^2)+4.*w.*nu+( ...
  -2).*yo.*((-2)+nu).*atan((w-xo)./yo)+(-2).*yo.*((-2)+nu) ...
  .*atan((w+xo)./yo)+(1/2).*(w+xo).*((-3)+2.*nu).*(log((w+(-1) ...
  .*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)))+(1/8).*fy.*pi.^(-1).* ...
  w.^(-1).*((-1)+nu).^(-1).*(2.*w.*((-1).*w+xo).*yo.*((w+(-1).*xo) ...
  .^2+yo.^2).^(-1)+2.*(w+xo).*nu.*atan((w-xo)./yo)+2.*(w+ ...
  xo).*nu.*atan((w+xo)./yo)+(1/2).*yo.*(1+2.*nu).*(log((w+(-1).* ...
  xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)));

sxx_2 = @(fx,fy,w) (1/16).*fx.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(4.*w.*((w+xo).^2+ ...
  yo.^2).^(-1).*(3.*(w+xo).^2+4.*yo.^2+(-2).*((w+xo).^2+yo.^2).*nu)+ ...
  4.*yo.*((-2)+nu).*atan((w-xo)./yo)+4.*yo.*((-2)+nu).* ...
  atan((w+xo)./yo)+(w+(-1).*xo).*((-3)+2.*nu).*(log((w+(-1).* ...
  xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)))+(1/16).*fy.*pi.^(-1).* ...
  w.^(-1).*((-1)+nu).^(-1).*((-4).*w.*(w+xo).*yo.*((w+xo).^2+yo.^2) ...
  .^(-1)+4.*(w+(-1).*xo).*nu.*atan((w-xo)./yo)+4.*(w+(-1) ...
  .*xo).*nu.*atan((w+xo)./yo)+(-1).*yo.*(1+2.*nu).*(log((w+(-1) ...
  .*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)));

% syy kernels
syy_1 = @(fx,fy,w) (-1/16).*fx.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(((w+(-1).*xo).^2+ ...
  yo.^2).^(-1).*((-4).*w.*(w+(-1).*xo).^2+(-8).*w.*yo.^2)+8.*w.*nu+( ...
  -4).*yo.*((-1)+nu).*atan((w-xo)./yo)+(-4).*yo.*((-1)+nu) ...
  .*atan((w+xo)./yo)+(w+xo).*((-1)+2.*nu).*(log((w+(-1).*xo) ...
  .^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)))+(-1/8).*fy.*pi.^(-1).*w.^( ...
  -1).*((-1)+nu).^(-1).*(2.*w.*((-1).*w+xo).*yo.*((w+(-1).*xo).^2+ ...
  yo.^2).^(-1)+2.*(w+xo).*((-1)+nu).*atan((w-xo)./yo)+2.* ...
  (w+xo).*((-1)+nu).*atan((w+xo)./yo)+(1/2).*yo.*((-1)+2.*nu).*( ...
  log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)));

syy_2 = @(fx,fy,w) (-1/8).*fx.*pi.^(-1).*w.^(-1).*((-1)+nu).^(-1).*(2.*w.*((w+xo).^2+ ...
  yo.^2).^(-1).*((w+xo).^2+2.*yo.^2+(-2).*((w+xo).^2+yo.^2).*nu)+2.* ...
  yo.*((-1)+nu).*atan((w-xo)./yo)+2.*yo.*((-1)+nu).*atan((w+xo)./yo)+(1/2).*(w+(-1).*xo).*((-1)+2.*nu).*(log((w+(-1).* ...
  xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)))+(-1/8).*fy.*pi.^(-1).* ...
  w.^(-1).*((-1)+nu).^(-1).*((-2).*w.*(w+xo).*yo.*((w+xo).^2+yo.^2) ...
  .^(-1)+2.*(w+(-1).*xo).*((-1)+nu).*atan((w-xo)./yo)+2.* ...
  (w+(-1).*xo).*((-1)+nu).*atan((w+xo)./yo)+(-1/2).*yo.*((-1)+ ...
  2.*nu).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)));

%% Strain kernels

% exx
exx_1 = @(fx,fy,w) 1/(2*mu*(1+nu)).*(sxx_1(fx,fy,w) - nu.*syy_1(fx,fy,w));
exx_2 = @(fx,fy,w) 1/(2*mu*(1+nu)).*(sxx_2(fx,fy,w) - nu.*syy_2(fx,fy,w));

% eyy
eyy_1 = @(fx,fy,w) 1/(2*mu*(1+nu)).*(syy_1(fx,fy,w) - nu.*sxx_1(fx,fy,w));
eyy_2 = @(fx,fy,w) 1/(2*mu*(1+nu)).*(syy_2(fx,fy,w) - nu.*sxx_2(fx,fy,w));

% exy
exy_1 = @(fx,fy,w) 1/(2*mu).*sxy_1(fx,fy,w);
exy_2 = @(fx,fy,w) 1/(2*mu).*sxy_2(fx,fy,w);

%% Store stress and strain kernels (4-d matrix)
% Stress_kernels - [Nobs x (sxx,sxy,syy) x (fx or fy) x 2 basis functions]
Stress = zeros(Nobs,3,2,2);
Strain = zeros(Nobs,3,2,2);

% fx kernels
Stress(:,1,1,:) = [sxx_1(fx,0,w),sxx_2(fx,0,w)];
Stress(:,2,1,:) = [sxy_1(fx,0,w),sxy_2(fx,0,w)];
Stress(:,3,1,:) = [syy_1(fx,0,w),syy_2(fx,0,w)];
% fy kernels
Stress(:,1,2,:) = [sxx_1(0,fy,w),sxx_2(0,fy,w)];
Stress(:,2,2,:) = [sxy_1(0,fy,w),sxy_2(0,fy,w)];
Stress(:,3,2,:) = [syy_1(0,fy,w),syy_2(0,fy,w)];

% fx kernels
Strain(:,1,1,:) = [exx_1(fx,0,w),exx_2(fx,0,w)];
Strain(:,2,1,:) = [exy_1(fx,0,w),exy_2(fx,0,w)];
Strain(:,3,1,:) = [eyy_1(fx,0,w),eyy_2(fx,0,w)];
% fy kernels
Strain(:,1,2,:) = [exx_1(0,fy,w),exx_2(0,fy,w)];
Strain(:,2,2,:) = [exy_1(0,fy,w),exy_2(0,fy,w)];
Strain(:,3,2,:) = [eyy_1(0,fy,w),eyy_2(0,fy,w)];


end