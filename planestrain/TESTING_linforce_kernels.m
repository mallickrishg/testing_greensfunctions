% script to convert Mathematica expressions to MATLAB
% for Kelvin problem with linearly varying body forces along a line segment
% 
% AUTHORS:
% Rishav Mallick, JPL, 2024

clear

mu = 1;
nu = 0.25;

Nobs = 100;
xo = linspace(-2,2,Nobs)';
yo = zeros(Nobs,1);

ux_1 = @(fx,fy,w) ((1/8).*fx.*w.^(-1).*(w+(-1).*xo).*(3.*w+xo).*mu.^(-1).*nu.*(pi+(-1) ...
  .*pi.*nu).^(-1).*log((w+(-1).*xo).^2+yo.^2)+(1/32).*fx.*pi.^(-1).* ...
  w.^(-1).*mu.^(-1).*((-1)+nu).^(-1).*(4.*w.*(8.*w.*((-1)+nu)+xo.*((-3) ...
  +4.*nu))+(-16).*(w+xo).*yo.*((-1)+nu).*atan2((w-xo),yo)+ ...
  (-16).*(w+xo).*yo.*((-1)+nu).*atan2((w+xo),yo)+(3.*(w+(-1).* ...
  xo).*(3.*w+xo)+yo.^2.*(5+(-4).*nu)).*log((w+(-1).*xo).^2+yo.^2)+( ...
  3.*(w+xo).^2+(-5).*yo.^2+(-4).*(w+xo+(-1).*yo).*(w+xo+yo).*nu).* ...
  log((w+xo).^2+yo.^2)) + ...
  (1/16).*fy.*pi.^(-1).*w.^(-1).*yo.*mu.^(-1).*((-1)+nu).^(-1).*(4.*w+ ...
  (-2).*yo.*(atan2((w-xo),yo)+atan2((w+xo),yo))+( ...
  w+xo).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2))))./2;

ux_2 = @(fx,fy,w) (1/64).*fx.*pi.^(-1).*w.^(-1).*(w+(-1).*xo).^2.*mu.^(-1).*(3+(-4).* ...
  nu).*((-1)+nu).^(-1).*log((w+(-1).*xo).^2+yo.^2)+(1/32).*pi.^(-1).* ...
  w.^(-1).*(w+(-1).*xo).*mu.^(-1).*((-1)+nu).^(-1).*((-8).*fx.*yo.*(( ...
  -1)+nu).*(atan2((w-xo),yo)+atan2((w+xo),yo))+fy.* ...
  yo.*log((w+(-1).*xo).^2+yo.^2))+(1/64).*pi.^(-1).*w.^(-1).*mu.^(-1) ...
  .*((-1)+nu).^(-1).*(4.*w.*((-2).*fy.*yo+fx.*xo.*(3+(-4).*nu)+8.*fx.* ...
  w.*((-1)+nu))+yo.^2.*(4.*fy.*(atan2((w-xo),yo)+atan2((w+xo),yo))+...
  fx.*((-5)+4.*nu).*log((w+(-1).*xo).^2+yo.^2))+(2.* ...
  fy.*((-1).*w+xo).*yo+fx.*(3.*(3.*w+(-1).*xo).*(w+xo)+5.*yo.^2+(-4) ...
  .*((3.*w+(-1).*xo).*(w+xo)+yo.^2).*nu)).*log((w+xo).^2+yo.^2));

uy_1 = @(fx,fy,w) (1/32).*fx.*pi.^(-1).*w.^(-1).*yo.*mu.^(-1).*((-1)+nu).^(-1).*(4.*w+ ...
  (-2).*yo.*(atan2(w-xo,yo)+atan2(w+xo,yo))+( ...
  w+xo).*(log((w+(-1).*xo).^2+yo.^2)+(-1).*log((w+xo).^2+yo.^2)))+( ...
  1/64).*fy.*pi.^(-1).*w.^(-1).*mu.^(-1).*((-1)+nu).^(-1).*(4.*w.*(2.* ...
  w+xo).*((-3)+4.*nu)+8.*(w+xo).*yo.*((-1)+2.*nu).*atan2((-w+xo),yo)+...
  (-8).*(w+xo).*yo.*((-1)+2.*nu).*atan2(w+xo,yo)+( ...
  w.^2.*(9+(-12).*nu)+yo.^2.*(1+(-4).*nu)+2.*w.*xo.*((-3)+4.*nu)+ ...
  xo.^2.*((-3)+4.*nu)).*log((w+(-1).*xo).^2+yo.^2)+(-1).*((-3).*(w+ ...
  xo).^2+yo.^2+4.*(w+xo+(-1).*yo).*(w+xo+yo).*nu).*log((w+xo).^2+ ...
  yo.^2));

uy_2 = @(fx,fy,w) fx.*((-1/32).*pi.^(-1).*w.^(-1).*yo.*mu.^(-1).*((-1)+nu).^(-1).*(4.* ...
  w+(-2).*yo.*(atan2(w-xo,yo)+atan2(w+xo,yo))+ ...
  ((-1).*w+xo).*log((w+(-1).*xo).^2+yo.^2))+(w+(-1).*xo).*yo.*(32.* ...
  pi.*w.*mu+(-32).*pi.*w.*mu.*nu).^(-1).*log(w.^2+2.*w.*xo+xo.^2+yo.^2) ...
  )+fy.*((-1/8).*pi.^(-1).*w.^(-1).*(w+(-1).*xo).*yo.*mu.^(-1).*((-1) ...
  +nu).^(-1).*((-1)+2.*nu).*(atan2(w-xo,yo)+atan2((w+xo),yo))+...
  (1/64).*pi.^(-1).*w.^(-1).*(w+(-1).*xo).^2.*mu.^(-1).* ...
  (3+(-4).*nu).*((-1)+nu).^(-1).*log((w+(-1).*xo).^2+yo.^2)+(1/64).* ...
  pi.^(-1).*w.^(-1).*mu.^(-1).*((-1)+nu).^(-1).*(4.*w.*(2.*w+(-1).*xo) ...
  .*((-3)+4.*nu)+yo.^2.*((-1)+4.*nu).*log((w+(-1).*xo).^2+yo.^2)+(3.*( ...
  3.*w+(-1).*xo).*(w+xo)+yo.^2+(-4).*((3.*w+(-1).*xo).*(w+xo)+yo.^2) ...
  .*nu).*log((w+xo).^2+yo.^2)));

% set element length
w = 1;

figure(1),clf
subplot(2,1,1)
plot(xo,ux_1(1,0,w),'Linewidth',2), hold on
plot(xo,ux_2(1,0,w),'Linewidth',2)

subplot(2,1,2)
plot(xo,ux_1(0,1,w),'Linewidth',2), hold on
plot(xo,ux_2(0,1,w),'Linewidth',2)

figure(2),clf
subplot(2,1,1)
plot(xo,uy_1(1,0,w),'Linewidth',2), hold on
plot(xo,uy_2(1,0,w),'Linewidth',2)

subplot(2,1,2)
plot(xo,uy_1(0,1,w),'Linewidth',2), hold on
plot(xo,uy_2(0,1,w),'Linewidth',2)